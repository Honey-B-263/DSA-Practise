An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.


class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int s=0;
        int e=arr.size()-1;
        int mid=s + (e-s)/2;

        while(s<e){ //not using the "=" as it will compare the situation again and again, once s>=e exit the loop, and return s. At the end of loop, our final ans s and e will be pointing at the same index
            if(arr[mid]<arr[mid+1]){ //ie, my mid lies in the first slope therefore iterate s
                s= mid+1;
            }

            else{
                e=mid; //e!=mid-1 as mid could be our peak
            }

           mid =s + (e-s)/2;
        }

        return mid; //same ans with return s; how????????? 
        //consider the test case [1,2,5,3,1] mid1=2 ie, value 5; it is not smaller than 3 therefore go to else e=2, mid2=1ie value 2; now it goes to if as 2<5, s=mid+1, ie, 1+1=2 value =5; mid3=2+(2-2)/2; now e==s therefore exit the loop return mid or s, answer will be same!!!!!!!!!!!!
        
    }
};
