Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.


class Solution {
public:

//write binary search algo twice for both first and last occurrence.

    int firstsearch(vector<int>& nums, int target) {
        int s=0;
        int e= nums.size()-1;
        int mid = s+(e-s)/2;
        int ans=-1;
        while(s<=e){
            if(nums[mid]==target){
                ans= mid;
                e=mid-1;
            }
            if(target>nums[mid]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }

            mid= s+(e-s)/2;
        }
        return ans;
        
    }
    int lastsearch(vector<int>& nums, int target) {
        int s=0;
        int e= nums.size()-1;
        int mid = s+(e-s)/2;
        int ans=-1;
        while(s<=e){
            if(nums[mid]==target){
                ans= mid;
                s=mid+1;
            }
            else if(target>nums[mid]){  //use else if (not multiple if, as it guarantees to execute all of them) as it only executes the latter if when the former is false. 
                s=mid+1;
            }
            else{
                e=mid-1;
            }

            mid= s+(e-s)/2;
        }
        return ans;
        
    }


    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>ans;
        ans.push_back(firstsearch(nums, target));
        ans.push_back(lastsearch(nums, target));
        return ans;
        
    }
};
