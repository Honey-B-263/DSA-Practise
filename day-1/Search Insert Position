Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.


class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        int mid= s+(e-s)/2;
        if(target>nums[e]){  //check earlier if target>last value return the last value
            return e+1; //since e=nums.size()-1, therefore index of last element will be e+1
        }
        while(s<=e){
            if(nums[mid]==target){
                return mid;
            }
            if(target>nums[mid]){
                s=mid+1;
            }
            else{ //target<nums[mid]
                e=mid-1;
            }
            mid = s + (e-s)/2;
        }

        return s; //return the lower value
        
    }
};
