https://www.codingninjas.com/studio/problems/house-robber_839733?leftPanelTab=0

this q is similar to Maximum sum of non-adjacent elements : https://www.codingninjas.com/studio/problems/maximum-sum-of-non-adjacent-elements_843261?leftPanelTab=0

we just need to see that if we include the first element then exclude the last element or exclude the first if considering the last element as numbers are arranged in circular fashion. So first and elements are adjacent to each other we need to rob non-adjacent elements.

#include <bits/stdc++.h> 

long long int solveSO(vector<int> &nums){
   
    int n=nums.size();
    //base case
   long long int prev2=0;
   long long int prev1=nums[0];

    for(int i=1;i<n;i++){
        long long int incl = prev2+nums[i];
        long long int excl = prev1 + 0;
        long long int curr= max(incl,excl);
        prev2=prev1;
        prev1=curr;
    }
    return prev1;
}

long long int houseRobber(vector<int>& valueInHouse)
{

    vector<int> first,second;
    int n = valueInHouse.size();

    if(n==1)
    return valueInHouse[0];

    for (int i = 0; i < n; i++) {
    if (i != n - 1)
      first.push_back(valueInHouse[i]);
    if (i != 0)
      second.push_back(valueInHouse[i]);
    }
    return max(solveSO(first), solveSO(second));
}
