https://leetcode.com/problems/min-cost-climbing-stairs/description/

class Solution {
public:

//memorization(top-down)
    int solve(vector<int>& cost, int n, vector<int>& dp){ //&dp not dp
        //base case
        if(n==0)
        return cost[0];
        if(n==1)
        return cost[1];

        //step-3 using memorization
        if(dp[n]!=-1){
            return dp[n];
        }

        //step-2 storing the values in dp array
        dp[n]=cost[n]+min(solve(cost,n-1,dp),solve(cost,n-2,dp));
        return dp[n];

}

//tabulation(bottom up)
int solve2(vector<int>& cost, int n){
        //create dp array
        vector<int> dp(n+1);
        //analyze base case
        dp[0]=cost[0];
        dp[1]=cost[1];
        //instead of calling recursion relation call dp
        for(int i=2;i<n;i++){ //since we have already considered 0 & 1
            dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
        }

        return min(dp[n-1],dp[n-2]);
        
    }

    int minCostClimbingStairs(vector<int>& cost) {
       int n=cost.size();
        //create a dp array initializing all th indexes with -1
        // vector<int> dp(n+1,-1);

        // int ans=min(solve(cost,n-1,dp), solve(cost,n-2,dp));
        // return ans;
        return solve2(cost,n);
    }
};
